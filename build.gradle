/*
 * Copyright 2015-2021 Real Logic Limited, Adaptive Financial Consulting Ltd., Monotonic Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext {
        awsAccessKeyId = System.env.AWS_ACCESS_KEY_ID
        awsSecretAccessKey = System.env.AWS_SECRET_ACCESS_KEY
    }

    repositories {
        mavenCentral()
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0' apply false
    id 'net.researchgate.release' version '2.8.1'
    id "com.github.ben-manes.versions" version "0.39.0"
}

def checkstyleVersion = '8.39'
def hamcrestVersion = '2.2'
def junitVersion = '4.13.2'
def mockitoVersion = '3.11.2'
def hdrHistogramVersion = '2.1.12'
def jmhVersion = '1.32'

def aeronVersion = '1.34.0'
def agronaVersion = '1.11.0'
def sbeVersion = '1.23.0'
def artioJavaVersion = JavaVersion.VERSION_1_8
def artioGroup = 'uk.co.real-logic'
def iLink3Enabled = false

defaultTasks 'clean', 'build'

def projectPom = {
    name = 'artio'
    packaging = 'jar'
    description = 'High-Performance FIX Gateway'

    url = 'https://github.com/real-logic/artio'

    scm {
        connection = 'scm:git:https://github.com/real-logic/artio.git'
        developerConnection = 'scm:git:https://github.com/real-logic/artio.git'
        url = 'https://github.com/real-logic/artio.git'
    }

    licenses {
        license {
            name = 'The Apache License, Version 2.0'
            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id = 'RichardWarburton'
            name = 'Richard Warburton'
            email = 'richard.warburton@gmail.com'
            url = 'https://github.com/RichardWarburton'
        }
        developer {
            id = 'mjpt777'
            name = 'Martin Thompson'
            email = 'mjpt777@gmail.com'
            url = 'https://github.com/mjpt777'
        }
    }
}

ext {
    group = artioGroup
    isReleaseVersion = !version.endsWith("SNAPSHOT")
    iLink3Enabled = Boolean.getBoolean("fix.core.iLink3Enabled")

    if (!project.hasProperty('repoUsername')) {
        repoUsername = ''
    }

    if (!project.hasProperty('repoPassword')) {
        repoPassword = ''
    }

    if (!project.hasProperty('repoUrl')) {
        repoUrl = ''
    }

    if (!project.hasProperty('snapshotUrl')) {
        snapshotUrl = ''
    }
}

allprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'

    group = artioGroup
    version = version

    tasks.withType(JavaCompile) {
        sourceCompatibility = artioJavaVersion
        targetCompatibility = artioJavaVersion
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    dependencies {
        testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "junit:junit:${junitVersion}"
    }

    checkstyle.toolVersion = "${checkstyleVersion}"

    test {
        if (JavaVersion.current().isJava9Compatible()) {
            jvmArgs('--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED')
        }

        testLogging {
            events 'skipped', 'failed'
            showStandardStreams = true
            exceptionFormat = 'full'
            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                }
            }
        }

        systemProperty 'fix.core.close_checker', 'true'
        systemProperty "fix.core.debug", System.getProperty("fix.core.debug")

        beforeTest { desc ->
            if (System.properties["printTestNames"] != null) {
                print "Executing test ${desc.name} [${desc.className}]"
            }
        }

        afterTest { desc, result ->
            if (System.properties["printTestNames"] != null) {
                println " with result: ${result.resultType}"
            }
        }
    }

    javadoc {
        title = '<h1>Artio</h1>'
        options.bottom = '<i>Copyright &#169; 2015-2021 Real Logic Limited. All Rights Reserved.</i>'
        options.encoding = 'UTF-8'
        options.docEncoding = 'UTF-8'
        options.charSet = 'UTF-8'
        if (JavaVersion.current().isJava10Compatible()) {
            options.addBooleanOption 'html5', true
        }
    }

    jar {
        manifest.attributes(
            'Implementation-Title': 'Artio',
            'Implementation-Version': archiveVersion,
            'Implementation-Vendor': 'Real Logic Limited'
        )
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveClassifier.set('tests')
        archiveBaseName.set("test-${project.archivesBaseName}")
        from sourceSets.test.output
    }

    task allDeps(type: DependencyReportTask) {}

    configurations {
        tests
    }

    artifacts {
        tests testJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    java {
        withSourcesJar()
        withJavadocJar()
    }
}

def validationXsdPath = project(':artio-codecs').projectDir.toString() + '/src/main/resources/fpl/sbe.xsd'

project(':artio-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        codecGeneration
    }

    dependencies {
        api "org.agrona:agrona:${agronaVersion}"
        api "io.aeron:aeron-client:${aeronVersion}"
        codecGeneration "uk.co.real-logic:sbe-tool:${sbeVersion}"
        api "uk.co.real-logic:sbe-tool:${sbeVersion}"
        api files('build/classes/java/generated')
        testImplementation files('build/classes/java/generated')
    }

    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    compileJava.dependsOn 'compileGeneratedJava'

    compileGeneratedJava.dependsOn 'generateMessages'

    task generateMessages(type: JavaExec) {
        mainClass.set('uk.co.real_logic.sbe.SbeTool')
        classpath = configurations.codecGeneration
        systemProperties('sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.validation.stop.on.error': 'true',
            'sbe.validation.xsd': validationXsdPath)
        args = [
            'src/main/resources/uk/co/real_logic/artio/messages/message-schema.xml',
            'src/main/resources/uk/co/real_logic/artio/storage/storage-message-schema.xml'
        ]
    }

    jar {
        from sourceSets.generated.output
    }

    sourcesJar {
        dependsOn 'generateMessages'
        from sourceSets.generated.java
    }

    javadoc {
        source += sourceSets.generated.java
    }

    checkstyleGenerated.enabled = false

    publishing {
        publications {
            artioCodecs(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioCodecs
    }
}

project(':artio-ilink3-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        codecGeneration
    }

    dependencies {
        api "org.agrona:agrona:${agronaVersion}"
        codecGeneration "uk.co.real-logic:sbe-tool:${sbeVersion}"
        api files('build/classes/java/generated')
        testImplementation files('build/classes/java/generated')
    }

    def outputClasses = 'out/production/classes'
    def sbePath = 'src/main/resources/uk/co/real_logic/artio/ilink/ilinkbinary.xml'
    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    if (iLink3Enabled) {
        compileJava.dependsOn 'compileGeneratedJava'
        compileGeneratedJava.dependsOn 'generateMessages', 'copySbeIr'

        task generateMessages(type: JavaExec) {
            mainClass.set('uk.co.real_logic.sbe.SbeTool')
            classpath = configurations.codecGeneration
            systemProperties(
                'sbe.output.dir': generatedDir,
                'sbe.target.language': 'Java',
                'sbe.java.generate.interfaces': 'true',
                'sbe.generate.ir': 'true')
            args = [ sbePath ]
        }

        task copySbeIr (type: Copy) {
            dependsOn 'generateMessages'
            from generatedDir.absolutePath + "/ilinkbinary.sbeir"
            into outputClasses + '/iLinkBinary'
        }
    }

    sourcesJar {
        if (iLink3Enabled) {
            dependsOn 'generateMessages'
        }
        from sourceSets.generated.java
    }

    javadoc {
        source += sourceSets.generated.java
    }

    jar {
        from sourceSets.generated.output

        from(outputClasses) {
            include 'iLinkBinary/ilinkbinary.sbeir'
        }
    }

    checkstyleGenerated.enabled = false

    publishing {
        publications {
            artioILink3Codecs(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioILink3Codecs
    }
}

project(':artio-binary-entrypoint-codecs') {
    apply plugin: 'com.github.johnrengelman.shadow'

    configurations {
        codecGeneration
    }

    dependencies {
        api "org.agrona:agrona:${agronaVersion}"
        codecGeneration "uk.co.real-logic:sbe-tool:${sbeVersion}"
        api files('build/classes/java/generated')
        testImplementation files('build/classes/java/generated')
    }

    def outputClasses = 'out/production/classes'
    def sbePath = 'src/main/resources/uk/co/real_logic/artio/entrypoint/binary_entrypoint.xml'
    def generatedDir = file("${buildDir}/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    compileJava.dependsOn 'compileGeneratedJava'
    compileGeneratedJava.dependsOn 'generateMessages', 'copySbeIr'

    task generateMessages(type: JavaExec) {
        mainClass.set('uk.co.real_logic.sbe.SbeTool')
        classpath = configurations.codecGeneration
        systemProperties(
            'sbe.output.dir': generatedDir,
            'sbe.target.language': 'Java',
            'sbe.java.generate.interfaces': 'true',
            'sbe.generate.ir': 'true')
        args = [ sbePath ]
    }

    task copySbeIr (type: Copy) {
        dependsOn 'generateMessages'
        from generatedDir.absolutePath + "/binary_entrypoint.sbeir"
        into outputClasses + '/b3/entrypoint/fixp/sbe/'
    }

    sourcesJar {
        dependsOn 'generateMessages'
        from sourceSets.generated.java
    }

    javadoc {
        source += sourceSets.generated.java
    }

    jar {
        from sourceSets.generated.output

        from(outputClasses) {
            include '/b3/entrypoint/fixp/sbe/binary_entrypoint.sbeir'
        }
    }

    checkstyleGenerated.enabled = false

    publishing {
        publications {
            artioBinaryEntrypointCodecs(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioBinaryEntrypointCodecs
    }
}

project(':artio-binary-entrypoint-impl') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        api project(':artio-binary-entrypoint-codecs')
        api project(':artio-codecs')
        api project(':artio-core')
    }

    publishing {
        publications {
            artioBinaryEntrypointImpl(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioBinaryEntrypointImpl
    }
}

project(':artio-ilink3-impl') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        if (iLink3Enabled) {
            api project(':artio-ilink3-codecs')
        }

        api project(':artio-codecs')
        api project(':artio-core')
    }

    compileJava.enabled = iLink3Enabled
    compileTestJava.enabled = iLink3Enabled
    test.enabled = iLink3Enabled
    javadoc.enabled = iLink3Enabled

    publishing {
        publications {
            artioIlink3Impl(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioIlink3Impl
    }
}

project(':artio-session-codecs') {
    configurations {
        codecGeneration
    }

    dependencies {
        api project(':artio-codecs')
        codecGeneration project(':artio-codecs')
        api files('build/classes/java/generated')
    }

    def generatedDir = file("$buildDir/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    compileJava.dependsOn 'compileGeneratedJava'
    compileGeneratedJava.dependsOn 'generateCodecs', 'generateOtherCodecs'

    task generateCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = configurations.codecGeneration
        args = [generatedDir, 'src/main/resources/session_dictionary.xml']
        outputs.dir generatedDir
        systemProperty("fix.codecs.flyweight", "true")
    }

    task generateOtherCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = configurations.codecGeneration
        args = [generatedDir, 'src/main/resources/other_session_dictionary.xml']
        outputs.dir generatedDir
        systemProperty("fix.codecs.flyweight", "true")
        systemProperty("fix.codecs.parent_package", "uk.co.real_logic.artio.other")
    }

    jar {
        from sourceSets.generated.output
    }

    sourcesJar {
        dependsOn 'generateCodecs', 'generateOtherCodecs'
        from sourceSets.generated.java
    }

    javadoc {
        source += sourceSets.generated.java
    }

    publishing {
        publications {
            artioSessionCodecs(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioSessionCodecs
    }
}

project(':artio-session-fixt-codecs') {
    configurations {
        codecGeneration
    }

    dependencies {
        api project(path: ':artio-codecs')
        codecGeneration project(':artio-codecs')
        api files('build/classes/java/generated')
    }

    def generatedDir = file("$buildDir/generated-src")
    sourceSets {
        generated {
            java.srcDir generatedDir
            compileClasspath += configurations.codecGeneration
        }
    }

    compileJava.dependsOn 'compileGeneratedJava'

    compileGeneratedJava {
        dependsOn 'generateCodecs'
        classpath += configurations.codecGeneration
    }

    task generateCodecs(type: JavaExec) {
        mainClass.set('uk.co.real_logic.artio.dictionary.CodecGenerationTool')
        classpath = configurations.codecGeneration
        systemProperty("fix.codecs.parent_package", "uk.co.real_logic.artio.fixt")
        args = [generatedDir, 'src/main/resources/FIXT11.xml']
        outputs.dir generatedDir
    }

    jar {
        from sourceSets.generated.output
    }

    sourcesJar {
        dependsOn 'generateCodecs'
        from sourceSets.generated.java
    }

    javadoc {
        source += sourceSets.generated.java
    }

    publishing {
        publications {
            artioSessionFixtCodecs(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioSessionFixtCodecs
    }
}

project(':artio-core') {
    dependencies {
        testImplementation project(path: ':artio-codecs', configuration: 'tests')
        testImplementation project(':artio-session-codecs')
        testImplementation project(':artio-session-fixt-codecs')
        api project(':artio-codecs')

        api "io.aeron:aeron-client:${aeronVersion}"
        api "io.aeron:aeron-driver:${aeronVersion}"
        api "io.aeron:aeron-archive:${aeronVersion}"
        api "org.hdrhistogram:HdrHistogram:${hdrHistogramVersion}"
    }

    test {
        systemProperties('java.net.preferIPv4Stack': true)
    }

    publishing {
        publications {
            artioCore(MavenPublication) {
                from components.java
                artifact(testJar)
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioCore
    }
}

project(':artio-system-tests') {
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceSets {
        perf
    }

    dependencies {
        testImplementation project(path: ':artio-core', configuration: 'tests')
        testImplementation project(path: ':artio-codecs', configuration: 'tests')

        testImplementation project(path: ':artio-session-codecs', configuration: 'tests')
        testImplementation project(path: ':artio-session-fixt-codecs', configuration: 'tests')

        api project(':artio-session-codecs')
        api project(':artio-session-fixt-codecs')
        api project(path: ':artio-core')

        perfImplementation project
        perfImplementation "org.openjdk.jmh:jmh-core:${jmhVersion}"
        // For IDEA:
        implementation "org.openjdk.jmh:jmh-core:${jmhVersion}"

        annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    }

    test {
        systemProperties(
            'aeron.dir.warn.if.exists': 'false',
            'aeron.use.windows.high.res.timer': 'true',
            'aeron.term.buffer.sparse.file': 'true')
    }

    task benchmarks(dependsOn: perfClasses) {
        shadowJar {
            archiveClassifier.set("benchmarks")

            from sourceSets.main.output
            from sourceSets.perf.output
            from project.configurations.perfRuntimeClasspath

            manifest.attributes('Main-Class': 'org.openjdk.jmh.Main')
        }

        doLast {
            shadowJar
        }
    }

    publishing {
        publications {
            artioSystemTests(MavenPublication) {
                from components.java
                artifact(testJar)
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioSystemTests
    }
}

project(':artio-ilink-system-tests') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        testImplementation project(path: ':artio-core', configuration: 'tests')
        testImplementation project(path: ':artio-codecs', configuration: 'tests')
        testImplementation project(path: ':artio-system-tests', configuration: 'tests')

        implementation project(':artio-core')
        implementation project(':artio-ilink3-codecs')
        implementation project(':artio-ilink3-impl')
    }

    compileJava.enabled = iLink3Enabled
    compileTestJava.enabled = iLink3Enabled
    javadoc.enabled = iLink3Enabled

    test {
        onlyIf { iLink3Enabled }
        systemProperties(
            'aeron.dir.warn.if.exists': 'false',
            'aeron.use.windows.high.res.timer': 'true',
            'aeron.term.buffer.sparse.file': 'true')
    }

    publishing {
        publications {
            artioILink3SystemTests(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioILink3SystemTests
    }
}

project(':artio-binary-entrypoint-system-tests') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        testImplementation project(path: ':artio-core', configuration: 'tests')
        testImplementation project(path: ':artio-codecs', configuration: 'tests')
        testImplementation project(path: ':artio-system-tests', configuration: 'tests')
        testImplementation project(':artio-binary-entrypoint-codecs')
        testImplementation project(':artio-binary-entrypoint-impl')
        testImplementation project(':artio-session-codecs')

        implementation project(':artio-core')
        implementation project(':artio-binary-entrypoint-codecs')
        implementation project(':artio-binary-entrypoint-impl')
    }

    test {
        systemProperties(
            'aeron.dir.warn.if.exists': 'false',
            'aeron.use.windows.high.res.timer': 'true',
            'aeron.term.buffer.sparse.file': 'true')
    }

    publishing {
        publications {
            artioBinaryEntrypointSystemTests(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioBinaryEntrypointSystemTests
    }
}

project(':artio-samples') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        api project(':artio-core')
        api project(':artio-session-codecs')
    }

    shadowJar {
        archiveFileName = 'samples.jar'
    }

    build.doLast {
        shadowJar
    }

    publishing {
        publications {
            artioSamples(MavenPublication) {
                from components.java
                pom(projectPom)
            }
        }
    }

    signing {
        sign publishing.publications.artioSamples
    }
}

subprojects {
    publishing {
        repositories {
            maven {
                name = 'oss'
                url = !isReleaseVersion ? snapshotUrl : repoUrl
                credentials {
                    username = repoUsername
                    password = repoPassword
                }
            }
            maven {
                name = 'private'
                url = 's3://artio-repository/releases'
                credentials(AwsCredentials) {
                    accessKey = awsAccessKeyId
                    secretKey = awsSecretAccessKey
                }
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        isReleaseVersion
    }
}

wrapper {
    gradleVersion = '7.1.1'
    distributionType = 'ALL'
}

task copyTestLogs(type: Copy) {
    from '.'
    include '**/build/test-output/**'
    include '**/*.log'
    include '**/*.tlog'
    include 'LICENSE'
    exclude 'build'
    into 'build/test_logs'

    includeEmptyDirs = false
}
